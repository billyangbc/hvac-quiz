# Creating multi-stage build for production
FROM node:20-alpine AS build
RUN apk update && apk add --no-cache build-base gcc autoconf automake zlib-dev libpng-dev vips-dev git > /dev/null 2>&1
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}

WORKDIR /opt/
COPY package.json ./
RUN npm install -g node-gyp
RUN npm config set fetch-retry-maxtimeout 600000 -g && npm install --only=production
ENV PATH=/opt/node_modules/.bin:$PATH
WORKDIR /opt/app
COPY . .
RUN npm run build

# Creating final production image
FROM node:20-alpine
RUN apk add --no-cache vips-dev
ARG NODE_ENV=production
ENV NODE_ENV=${NODE_ENV}
WORKDIR /opt/
COPY --from=build /opt/node_modules ./node_modules
WORKDIR /opt/app
COPY --from=build /opt/app ./
ENV PATH=/opt/node_modules/.bin:$PATH

RUN chown -R node:node /opt/app
USER node
EXPOSE 1337
CMD ["npm", "run", "start"]

# docker build -t <username>/quiz:strapi-latest -f Dockerfile.prod .
# docker login -u <username>
# docker push <username>/quiz:strapi-latest

# to private registry (registry.idealz.io through cloudflare tunnel)
# docker build -t registry.idealz.io/quiz:strapi-latest -f Dockerfile.prod .
# docker login registry.idealz.io -u admin -p <password>
# docker push registry.idealz.io/quiz:strapi-latest

# !!!! Note: if got cloudflare 403 limit size error, use following workaround:
# kubectl port-forward svc/docker-registry 5000:5000 --namespace docker-registry
# or
# export POD_NAME=$(kubectl get pods --namespace docker-registry -l "app=docker-registry,release=docker-registry" -o jsonpath="{.items[0].metadata.name}")
# kubectl -n docker-registry port-forward $POD_NAME 5000:5000
# then
# docker tag registry.idealz.io/quiz:strapi-latest localhost:5000/quiz:strapi-latest
# docker login localhost:5000 -u admin
# docker push localhost:5000/quiz:strapi-latest
# check:
# https://registry.idealz.io/v2/quiz/tags/list